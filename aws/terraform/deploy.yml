parameters:
    -   name: awsServiceConnectionName
        displayName: Service connection name
        type: string
    -   name: applyAdditionalCommandOptions
        displayName: Additional command options for apply step
        type: string
        default: " "
    -   name: planFile
        displayName: Name of the plan file
        type: string
    -   name: terraformVersion
        displayName: Terraform version
        type: string
        default: '0.14.9'
    -   name: workingDirectory
        displayName: Working directory
        type: string
        default: '$(Pipeline.Workspace)'

steps:
    -   task: TerraformInstaller@0
        displayName: Install Terraform version:${{ parameters.terraformVersion }}
        inputs:
            terraformVersion: ${{ parameters.terraformVersion }}

    -   script: ls -al
        workingDirectory: ${{ parameters.workingDirectory }}

    -   script: ls -al .terraform/
        workingDirectory: ${{ parameters.workingDirectory }}

    -   script: ls -al .terraform/providers/
        workingDirectory: ${{ parameters.workingDirectory }}

    -   script: ls -al .terraform/providers/registry.terraform.io/
        workingDirectory: ${{ parameters.workingDirectory }}

    -   script: ls -al .terraform/providers/registry.terraform.io/hashicorp/
        workingDirectory: ${{ parameters.workingDirectory }}

    -   script: ls -al .terraform/providers/registry.terraform.io/hashicorp/aws/
        workingDirectory: ${{ parameters.workingDirectory }}

    -   script: ls -al .terraform/providers/registry.terraform.io/hashicorp/aws/3.32.0/
        workingDirectory: ${{ parameters.workingDirectory }}

    -   script: ls -al .terraform/providers/registry.terraform.io/hashicorp/aws/3.32.0/linux_amd64/
        workingDirectory: ${{ parameters.workingDirectory }}

    -   script: ls -al .terraform/providers/registry.terraform.io/hashicorp/aws/3.32.0/linux_amd64/terraform-provider-aws_v3.32.0_x5
        workingDirectory: ${{ parameters.workingDirectory }}

    -   task: TerraformTaskV1@0
        inputs:
            provider: 'aws'
            command: 'apply'
            commandOptions: '${{ parameters.planFile }}.tfplan -auto-approve -lock=true -input=false ${{ parameters.applyAdditionalCommandOptions }}'
            environmentServiceNameAWS: ${{ parameters.awsServiceConnectionName }}
            workingDirectory: ${{ parameters.workingDirectory }}
